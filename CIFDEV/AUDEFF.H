/////////////////////////////////////////////////////////////////////////////
// AudEff.h : interface of the CAudEff classes
// Copyright (c) 1987-1996 Andrew J. Michalik
/////////////////////////////////////////////////////////////////////////////
extern "C"
{
	#include "os_dev\winmem.h"			// Generic memory supp defs
	#include "effdev\geneff.h"			// Sound Effects definitions
#if (!defined (PCMVERNUM))
	#include "pcmdev\genpcm.h"			// PCM/APCM conv routine defs
#endif
}

/////////////////////////////////////////////////////////////////////////////
// Forward references
/////////////////////////////////////////////////////////////////////////////
class	CAudFil;
class	CEffAAF;
class	CEffRes;

/////////////////////////////////////////////////////////////////////////////
// CAudEff
// Audio effects stream 
/////////////////////////////////////////////////////////////////////////////
class CAudEff 
{
public:
	CAudEff ()	{memset (&m_ebEBSBlk, 0, sizeof (m_ebEBSBlk));}
	~CAudEff ()	{if (m_ebEBSBlk.mhBufHdl) GloAloRel (m_ebEBSBlk.mhBufHdl);}

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff) = 0;
    virtual	EBSBLK  *	GetEBSBlk () {return (&m_ebEBSBlk);}
	virtual	DWORD		Rd_EBStoP (LPVOID lpDstBuf, DWORD ulBufSiz, DWORD ulSmpCnt, 
						PCMTYP usDstPCM, WORD usEncMsk, LPITCB lpITCBlk);
	virtual	DWORD 		Wr_PtoEBS (LPVOID lpSrcBuf, DWORD *pulBytRem, DWORD ulSmpCnt, 
						PCMTYP usSrcPCM, WORD usEncMsk, LPITCB lpITCBlk);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	static	void 		CpxMul (CPXFLT a, CPXFLT b, CPXFLT FAR *pc)
	{
	    pc->flRea = a.flRea*b.flRea - a.flImg*b.flImg;
	    pc->flImg = a.flImg*b.flRea + a.flRea*b.flImg;
	}

protected: 	
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	EBSBLK		m_ebEBSBlk;				// Effects buffer stream block

private: 	
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffInp : public CAudEff
{
public:
	CEffInp (CAudFil *pAudFil);	
	~CEffInp();

	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff = NULL);

	virtual	BOOL		Open (UINT nOpenFlags, DWORD ulSmpOff = 0L, DWORD ulSmpCnt = -1L, DWORD ulLopCnt = 0L);	
	virtual	DWORD		Seek (DWORD ulPosVec);
	virtual	DWORD		Read (LPBYTE lpDstBuf, DWORD ulBufSiz);
	virtual	float		SmpToMSec (DWORD ulSmpPos);
	virtual	DWORD		MSecToSmp (float flTimPos);
	virtual	DWORD		GetSmpTot ();
	virtual	DWORD		GetSmpRem ();
	virtual	DWORD		GetSmpOff ();
    virtual void        Close ();

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	CAudFil	*	m_pAudFil;				// Audio file

	DWORD		m_ulSmpOff;				// File sample offset
	DWORD		m_ulSmpTot;				// File sample total count
	DWORD		m_ulLopCnt;				// Loop count
	DWORD		m_ulSmpRem;				// File samples remaining
	DWORD		m_ulLopRem;				// Loop count remaining

	VISMEMHDL	m_hgWrkHdl;				// Work memory buffer handle
	DWORD		m_ulWrkSiz;				// Work memory buffer size

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffChn : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffChn (WORD usDstChn);

	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);
	virtual	DWORD		SrcSizEst (DWORD ulDstSmp, WORD usSrcChn);
	virtual	DWORD		DstSizEst (DWORD ulSrcSmp, WORD usSrcChn);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	WORD 		m_usDstChn;				// Output channel count

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffAtD : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffAtD (PCMTYP usDstPCM);
	~CEffAtD();

	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	WORD		m_usDstAtD;				// Destination A to D resolution

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffDCE : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffDCE (WORD usSrcPCM, WORD usSrcChn, DWORD ulSrcFrq, float flCmpThr, 
						DWORD ulCmpAtk, float flCmpMin, float flExpThr, 
						DWORD ulExpAtk, float flExpMax, DWORD ulCE_Dcy, 
						float flNoiThr, float flNoiAtt);
	~CEffDCE () 		{EffDCERel(&m_dbDCEBlk);}
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	DCEBLK		m_dbDCEBlk;				// Dynamic Compressor / Expander blk

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffEch : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffEch (WORD usEchAlg, DWORD ulDlySmp, float flDec_dB);
	~CEffEch () 		{EffEchRel(&m_ebEchBlk);}
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	ECHBLK		m_ebEchBlk;				// Echo repeated call block
	

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffFad : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffFad (WORD usFadAlg, float flFadBeg, float flFadEnd, DWORD ulSmpCnt);
	~CEffFad () 		{EffFadRel(&m_fbFadBlk);}
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	FADBLK		m_fbFadBlk;				// Effects fade repeated call block

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffNoi : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffNoi (float flNoiThr, float flAtt_dB, PCMTYP usSrcPCM, WORD usNoiAlg);	
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	DWORD		m_ulMutThr;				// Muting threshold 
	float		m_flAtt_dB;				// Attenuation level

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffVol : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffVol	(float flLvl_dB) {m_flLvl_dB = flLvl_dB;}
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	float		m_flLvl_dB;				// New volume adjust level
};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffTon : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	typedef struct _TONBLK {
		float	flSigAmp;				// Signal freq (radians/smp)
		float	flSigFrq;				// Signal ampl (normalized) 
	} TONBLK;

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffTon	(TONBLK *pSigArr, WORD usSigCnt, float flTimLen, DWORD ulAtDMax, 
						DWORD ulSmpFrq);
	~CEffTon();
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff = NULL);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	

	VISMEMHDL	m_hgWrkHdl;				// Work memory buffer handle
	DWORD		m_ulWrkSiz;				// Work memory buffer size

	TONBLK *	m_pSigArr;				// Signal array
	WORD 		m_usSigCnt;				// Signal array size
	DWORD		m_ulSmpCnt;				// Signal length (samples)
	DWORD		m_ulSigPos;				// Signal phase position (samples)
	DWORD		m_ulBytRem;				// Bytes remaining in work buffer

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffMix : public CAudEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	// Mix all tracks into pFil000
	/////////////////////////////////////////////////////////////////////////
	CEffMix	(CAudFil *pFil000, WORD usLvl000, DWORD ulSmpOff, DWORD *pulSmpCnt, 
						CAudFil *pFil001, WORD usLvl001, WORD usAAFAlg, 
						WORD usResAlg);
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);
	~CEffMix();

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	#define		MAXCHNCNT	2
	CEffInp	*	m_pTrk001;				// Source audio file #1
	CEffChn	*	m_pChn001;				// Source channel fix #1
	CEffAAF	*	m_pAAF001;				// Source anti-aliasing #1
	CEffRes	*	m_pRes001;				// Source frq resampler #1
	CEffAtD	*	m_pAtD001;				// Source AtD converter #1
	EBSBLK	*	(m_pEBSArr[MAXCHNCNT]);	// Source EBS array
	float		m_flLvlArr[MAXCHNCNT];	// Mix level (normalized %) array

};

/////////////////////////////////////////////////////////////////////////////
//						Additional Effects...
/////////////////////////////////////////////////////////////////////////////
#include "efffrq.h"						// Audio frequency effects
#include "effequ.h"						// Audio equalizer effects

