/////////////////////////////////////////////////////////////////////////////
// EffEqu.h : Interface of the CAudEff equalizer classes
// Copyright (c) 1987-1996 Andrew J. Michalik
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
#define FEQMAXCNT		 64				// Freq equalizer max pnt cnt

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffEqu : public CFrqEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffEqu (WORD usFFTOrd, DWORD ulSmpFrq, WORD usInpCnt, float FAR *lpInpFtr,
						float flEquGai);
	~CEffEqu ();
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);
	typedef	BOOL		(CALLBACK EXPORT FRQEFFFTR)(CPXFLT FAR *,DWORD,DWORD,DWORD);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	

};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
class CEffPow : public CFrqEff
{
public:
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	CEffPow (WORD usFFTOrd, float flSetSiz, DWORD ulTimPnt, DWORD ulAtDMax, 
						FIOPOLPRC fpPolPrc, DWORD ulPolDat);
	~CEffPow ();
	virtual	CAudEff	*	ExeEffPrc (CAudEff *pAudEff);
	virtual	DWORD		Write (WORD *pusPltArr, DWORD ulTimCnt);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
private: 	
	static WORD CALLBACK EXPORT PowPolCBk (EFFPOL usPolReq, DWORD ulFilPos, 
								CEffPow FAR *lpEffPow);
	static WORD CALLBACK EXPORT	EffPowCBk (float FAR * FAR *ppflSrcBuf, 
		   						DWORD FAR *lpulDstRsv, DWORD ulBufPts, 
		   						DWORD ulTotPts, DWORD ulHdrPts, DWORD ulCtrPts,
		   						DWORD ulDstRem, LPFFTB lpFFTBlk);
	typedef struct _POWBLK {			// Power spectrum calculation block
		float		flSetSiz;			// Sum per freq bin set	size
		DWORD		ulTimPnt;			// Sum time point count
		DWORD		ulCurSum;			// Current sum count
		DWORD		ulSetOut;			// Set output count
	} POWBLK;

	FIOPOLPRC	m_fpFIOCBk;				// Audio file poll callback 
	DWORD		m_ulCBkDat;				// Callback data
	POWBLK		m_bpPowBlk;				// Power spectrum block
};


